
header {
    'IncludeJS.Builder'
    a.github-ribbon href='https://github.com/tenbits/IncludeJS';
}

scroller.content {
    p.tabPanel {
        div.info.active {
            div {
                ul {
                    li { 
                        'Builder - Combine Resources included with IncludeJS' 
                        div.hint > 'Javascript, Style, HTML, Image' 
                        div.hint > 'Images that are in styles, that are not in working directory (are referenced), will be copied into working directory'
                        div > ul {
                            li > 'include.js'
                            li > 'include.css'
                            li > 'include.load'
                            li > 'include.lazy'
                        }
                    }
                    li { 'Minify' 
                        div.hint > code {
                          a href='https://npmjs.org/package/uglify-js' target='_blank' > 'UglifyJS'
                          ' and '
                          a href='https://npmjs.org/package/clean-css' target='_blank' > 'clean-css'
                          ' are used'
                        }
                        div.hint > code > 'For UglifyJS you can specify compressor settings (So you can set defines to cut off DEBUG/TEST code from Release)
                            See UglifyJS documentation.'
                    }
                    li { 'JSHINT' div.hint > code { 'See ' a href='http://jshint.com/docs/' target='_blank' > 'JSHINT'} }
                    li { 
                        'Integrated Web Server with Browser AutoReload Feature'                        
                    }
                    li {
                        'Handles Resource Referencing and Importing '                        
                    }                    
                }
            }
        }
        
        div.commands {
            ul {
                li {
                    code > 'includejs [*.html] -minify'
                    ul {
                        li > 'parse html and Resolve all Resources'
                        li > 'parse scripts and Resolve all Resources'
                        li > 'parse dependency-scripts and Resolve all Resources'
                        li > '... and so on'
                        li > 'combine all resources into separate single files'
                        li {
                            'create new HTML with'
                            ul {
                                li > 'embedded Lazy- and Loaddata'
                                li > 'only one script tag - linked to combined script file'
                                li > 'only one style tag - linked to combined style file'
                            }
                        }
                    }
                }
                li {
                    code > 'includejs [*.config]'
                    code > ul {
                        li > '{'
                        li > '"file" — {String} - HTML input file'
                        li > '"vars" — {Object} — Variables used when parsing includes'
                        li {
                            '"action" — '
                            ul {
                                li > '"build" — @default — combine resources'
                                li > font color='#999' > '@see next page'
                                li > '"import" — copy outer resources into projects directory'
                                li > '"reference"'
                            }
                        }
                        
                        li > '"minify" — {Boolean} — run MinifyJS and clean-css'
                        li > '"uglify" - {Object:optional} - UglifyJS compressor settings. @default {global_defs: {DEBUG: false}}'
                        li  {
                            '"jshint" : {'
                            ul {
                                li > '"options" - {Object} - JSHINT options'
                                li > '"globals" - {Object} - global variables. @default {"window": false, "document": false}'
                                li > '"ignore" - {Object} - file names to ingore'
                            }
                        }
                        li > '"outputMain" — output name of a built html — @default "{name}.build.html"'
                        li > '"outputSources" — directory of combined/copied resources — @default "{name}.build/"'
                        li > '}'
                    }
                }
                li {
                    code > 'includejs template [name]'
                    p > 'Create Empty Project in {current} directory'
                    p > 'Available: "starter"'
                }
                li {
                    code > 'includejs globals'
                    p > 'Open global routes file'
                }
            }
        }
        div.resources {
            h6 > 'Small note about external resources'
            p > 'Every application has some outer dependencies. Lets say you created empty project and want to use some classes, styles and images
            from you own library "MyCoolStuff". There are 3 ways you can do it.'
            ul {
                li {
                    i > 'Bad — ''Copy them into working project. '
                    div;
                    u > 'Contra'' — '
                    ul {
                        li > 'you dont know always from start on what classes or styles you need'
                        li > 'you have to work a lot with copy/paste - and this was always a mess.'
                        li > 'they become part of the project. This is good for Release, but not for Development'
                        li > 'harms code organization energy'
                    }
                }
                li {
                    i > 'Better — ''Use IncludeJS Routing to reference to the directory'
                    code > 'include.cfg(coolStuff: "file:///c:/dev/MyCoolStuff/classes/{name}.js")'
                    u > 'Contra'' — '
                    ul {
                        li > 'Though after project build you dont have any absolute paths more, but not in Development'
                        li > 'When you develop a web site (not a html5 application), you definitely 
                            want to test on local server - is not possible with file:/// links'
                    }
                }
                li {
                    i > 'Best — ''Use symbolic links'
                    ul {
                        li > code > ' > npm install includejs -g'
                        li > code > ' > mkdir testProject && cd testProject'
                        li {
                            code > ' > includejs globals'                            
                            ul {
                                li > 'Add/Edit Paths to project directories, such as LibJS'
                                li > 'Add/Edit Default Routes'
                            }
                        }
                        li {
                            code > ' > includejs template starter'
                            'And now, under "testProject/.reference/libjs" you find a symbolic link to libjs project
                             and all requests to libjs libraries, such as '
                             code > 'include.js({ lib: "mask" })' 'will path through that symbolic link'
                        }
                    }
                    
                    b>'! ' 'Any time you can import all referenced resources into working project with:'
                    code > ' > includejs build.config -action import'
                    div {
                        'You find that referenced resources now in ' tt > q > 'testProject/.import' ' directory'
                    }
                    div { b>'! '  'Any time you can also switch back to referencing with:'}
                    code > ' > includejs build.config -action reference'
                }
            }
            
        }
    }
}

footer {
    radioButtons{
        button.active name='info' > 'Info'
        button name='commands' > 'Commands'
        button name='resources' > 'Resources'        
    }
}