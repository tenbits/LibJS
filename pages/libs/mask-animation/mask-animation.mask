layout:view master='view' {

	@content #title {
		a target='_blank' href='https://github.com/tenbits/mask-animation' > 'github@Mask.Animation'
	}

	@content #tabs {
		:radio .radioButtons{
			button.active name='info' > 'Info'
			button name='syntax' > 'Syntax'
			button name='api' > 'API'
			button name='example' > 'Example'
		}
	}
	
	@content #side-menu {
		:radio .group name='api' {
			.side-menu-item name='animation.mask' > 'Animation.Mask'
			.side-menu-item name='animation.js' > 'Animation.JS'
			.side-menu-item name='sprite' > 'Sprite'
		}
		
		:radio .group name='example' {
			.side-menu-item name='animation' > 'Animation.Mask'
			.side-menu-item name='sprite' > 'Sprite'
		}
	}

	@content #content {
		div.container.tabPanel {
			.info.active {
				h3 > 'CSS3 Animations with complex animation models'
				
				div > 'CSS3 Transitions are used'
				div > 'Not animatable properties can be used in animations, such as display:block|none'
				div > 'Signals, and also piped Signals, could be captured to start animation'
				
				h3 > 'CSS3 Sprite Animations'
				div > 'CSS3 keyframe animation is dynamically created, so the animation is handled by the browser'
			}
			
			.syntax {
				
				h3 > 'Property animation'
				
				'Property animations are declared in a "model/next" way to allow chaining and nesting. '
				'Each property animation is a string declaration:'
				prism > 'propertyName | ?from > to | ?time ?timing ?delay'
				
				p;
				
				prism > 'transform | translateX(50px) > translateX(100px) | 100ms ease-out 5s'
				.hint {
					tt > 'transform' ' animations are prefixless. All needed prefixes are handled intern.'
				}
				
				p;
				prism > formatter:pre > "
					mask.animate(element, {
						model: 'transform | scale(.5) transform(10px) > scale(1) | 100ms',
						next: 'transform | rotate(0deg) > rotate(90deg) transform(50px) | 200ms'
					});
				"
				.hint {
					'All ' tt > 'transform' ' properties are being tracked in chained animation.'
				}
				div {
					'From sample above, these transform properties are applied:'
					prism > formatter:pre > "
						// 1
						'scale(.5) transfrom(10px)'
						// 2
						'scale(1) transfrom(10px)'
						// 3
						'scale(1) transfrom(10px) rotate(0deg)'
						// 2
						'scale(1) transfrom(50px) rotate(90deg)'
					"
				}
			
				p;
				prism > formatter:pre > "
					mask.animate(element, {
						model: 'display | > block',
						next: 'opacity | 0 > 1 | 100ms'
					});
				"
				.hint {
					div > 'Animations can also include not animatable css properties, like block, visibility etc.'
					div > 'They are applied immediately, but you can also define "duration" or "delay"'
					div > '"duration" - apply value and wait N time'
					div > '"delay"    - wait N time and apply value'
				}
			
				h3 > 'Animation model'
				'Model is a json object that contains all property animations'
				prism > formatter:pre > "
				{
					model:  AnimationProperty <String> | AnimationModel <Object> | Array <String | Object>,
					next: AnimationProperty <String> | AnimationModel <Object> | Array <String | Object>,
				}
				"
				prism > formatter:pre > "
				
					mask.animate(el, 'opacity | > 1 | 100ms');
					mask.animate(el, ['opacity | > 1 | 100ms', 'background | green > red | 200ms']);
					mask.animate(el, {
						model: ['opacity | > 1 | 100ms', 'background | green > red | 200ms'],
						next: 'opacity | > 0 | 100ms'
					});
					mask.animate(el, {
						model: ['opacity | > 1 | 100ms', 'background | green > red | 200ms'],
						next: {
							model: 'opacity | > 0 | 100ms',
							next: 'display | > none'
						}
					});
				
				"
			}
			
			.api {
				
				:tabs #api > @panels {
					
					div name='animation.js' {
						prism > 'mask.animate(element, Model, onComplete)'
					}
					div name='animation.mask' {
						div > code > ':animation #ID x-slots=".." x-pipes=".." { /* model declaration */ }'
						p {
							h6 > 'Model'
							ul {
								li > 'Each property declaration is defined in a TEXTNODE'
							}
		
							div > prism > formatter:pre > "
								@model > /* TEXTNODE | @model */
								@next > /* TEXTNODE | @model */
							"
						}
		
						p {
							h6 > 'Attributes'
		
							table {
								tr {
									td > tt > 'id'
									td {
										'ID of the animation could be defined for starting it from a Controller'
									}
								}
								tr {
									td > tt > 'x-slots="slotName; someOtherSlotName"'
									td > 'Defines slots and starts animation automatically on signal capture'
								}
								tr {
									td > tt > 'x-pipes="pipeName.slotName"'
									td > 'Defines slots in a pipe and starts animation automatically on signal capture'
								}
		
							}
						}
		
						p {
							h6 > 'Javascript'
							div > 'Start the Animation from a Controller'
							prism > 'this.animation("ID").start(?onAnimationEnd, ?element)'
		
							.hint {
								tt > ':animation'
								' is bound to a container HTMLElement, but you can define any other element in start function'
							}
		
						}
					}
					div name='sprites' {
						
						
					}
					
				}
				
			}
			
			.example {
				:tabs #example > @panels {
					div name='animation' {
						div style='position:relative;' {
							div#ranimateExample style='height:100px; width:100px; background:rgb(240,10,10);' {
								:animation x-pipes='animation.start' {
		
									@model {
										@model {
											@model > 'transform | translate(0px, 0px) > translate(300px, 300px) | 1s'
											@next {
												@model > 'transform | scale(1) > translate(200px, 200px) scale(.5) | 600ms'
												@next {
													'transform | scale(.5) > scale(1.5) | 900ms'
													'opacity | 1 > 0 | 1s'
													'background-color | > violet | 1s'
												}
											}
										}
		
										@model {
											@model > 'background-color | > blue | 1s'
											@next > 'background-color | > yellow | 1s'
										}
									}
		
									@next {
										@model > 'opacity | 0 > 1 | 1.5s'
										@next {
											'transform | rotate(0deg) > scale(1) rotate(360deg) translate(0px,0px) | 2s'
											'background-color | > rgb(240,10,10) | 2s ease-in'
										}
									}
		
								}
							}
							button x-pipe-signal='click: animation.start' > 'Start'
						}
	
						prism language='css' > formatter:pre > "
							:animation x-pipes='animation.start' {
							  @model {
								@model {
								  @model > 'transform | translate(0px,0px) > translate(300px,300px) | 1s'
								  @next {
									@model > 'transform | scale(1) > translate(200px,200px) scale(.5) | 600ms'
									@next {
									  'transform | scale(.5) > scale(1.5) | 900ms'
									  'opacity | 1 > 0 | 1s'
									  'background-color | > violet | 1s'
									}
								  }
								}
	
								@model {
								  @model > 'background-color | > blue | 1s'
								  @next > 'background-color | > yellow | 1s'
								}
							  }
	
							  @next {
								@model > 'opacity | 0 > 1 | 1.5s'
								@next {
								  'transform | rotate(0deg) > scale(1) rotate(360deg) translate(0px,0px) | 2s'
								  'background-color | > rgb(240,10,10) | 2s ease-in'
								}
							  }
	
							}"
					}
					
					div name='sprite' {
						div >
							:animation:sprite
									id='loader'
									src='/images/libs/mask-animation/sprite.png'
									frames=36
									frameWidth=156
									frameHeight=156
									msperframe=80
									autostart
									iterationCount='infinite';
									
						prism language='css' > formatter:pre {
							"
							div >
							:animation:sprite
									id='loader'
									src='/images/libs/mask-animation/sprite.png'
									frames=36
									frameWidth=156
									frameHeight=156
									msperframe=80
									autostart
									iterationCount='infinite';
							
							"
						}
					}
				}

			}
		}
	}

}
