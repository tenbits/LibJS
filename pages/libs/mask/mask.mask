layout:view master='view' {

    title {
        a.github-ribbon href='https://github.com/tenbits/MaskJS';
    }



    tabs {
        radioButtons {
            button.active name='info' > 'Info'
            button name='examples' > 'Examples'
            button name='syntax' > 'Syntax'
            button name='api' > 'API'
            button name='snippets' > 'Snippets'
        }
    }

    content {
        .container.tabPanel {
            .info.active {
                ul {
                    li { 'Zen Coding / MVC Templates' div.hint > tt > 'Write Less, Do More' }
                    li { 'Dry & Highly Customizable' div.hint > tt > 'Custom Tags, Custom Value Preprocessors' }
                    li {
                        'For NodeJS and Browsers'
                        ul {
                            li {
                                'Browsers: DOM Builder direct from JSON tree'
                                div.hint > 'Is Faster as we skip html building and its parsing by browser.
                                And creation of JSON tree could be compared to native JSON.parse function.'
                            }
                            li {
                                'NodeJS: HTML Builder for sending it to client over http.'
                                div.hint > 'Usually you do not need this, as building UI with Mask Template on client or mobile app is very fast,
                                and you should use it.'
                            }
                        }
                    }
                    li {
                        'Performance '
                        div > a href='http://jsperf.com/javascript-template-engine-compare/65' > 'jsperf.com /1'
                        div > a href='http://jsperf.com/dom-vs-innerhtml-based-templating/670' > 'jsperf.com /2'

                        div.hint > tt { 'Building JSON tree:' a href='http://jsperf.com/maskjs-vs-json/9'> 'jsperf' }
                    }
                    li > 'No Dependencies'
                }
            }
            div.examples {
                maskExamples;
            }
            div.syntax {
                h4 > 'Tags'
                p {
                    h5 > 'Tag Declaration'
                    prism > 'tag#id.class{0,} key=[\'"]value[\'"]{0,}'
                    div.hint > 'Syntax Similar to SASS/Zen Coding'
                    div.hint > 'Starting from version .5.1 Tag Name can be omitted if class or id declaration is used. Tag Name will be then "div"'
                    h5 > 'Tags Items'
                    table style='margin-left:30px;'  {
                        tr { td > '«;»' td > ' — close tag, if it has no content' }
                        tr { td > '«>»' td > ' — if it has only one item (tag or literal)' }
                        tr { td > '«{»' td > ' — if it has one or more items. Then close it with «}».' }
                    }
                    p > 'And the content itself are other tags or literals'
                }

                h4 > 'Literal'
                p {
                    prism > '[\'"]Text Node Content[\'"]'
                }

                h4 > 'Template Values'
                p {
                    prism {
                        '~' '[propertyName.andChainingAlsoPossible]'
                    }
                    div > small {
                        '! Mask Default interpolation quotes were changed from #{ } to ~''[ ]. For fallback use:'
                        code > 'mask.setInterpolationQuotes("#{","}")'
                    }
                    h5 > 'Template Value Conditions'
                    prism {
                        '~' '[:index > 10 ? property : "Some other string"]'
                    }
                    h5 > 'Template Value Expressions'
                    prism {
                        '~' '[:controllerFunction(user) + "!"]'
                    }
                    h5 > 'Template Value Utilities'
                    'Template Values Can be Transformed before inserting'
                    prism {
                        '~' '[utilityName:data]'
                    }
                    div.hint {
                        a href='#/mask/api/registerUtility' > '@see mask.registerUtility'
                    }

                }
                h4 > 'Comments'
                p{
                    'Single Line Comments'
                    prism > '// this is comment'
                }
            }
            div.api {
                apiViewer src='/api/mask.html' base='/mask/api';
            }


            div.snippets {
                ul.tiny {
                    li {
                        prism > 'div;'
                        prism language='markup' > '<div></div>'
                    }
                    li {
                        prism > 'div.class#id.other;'
                        prism language='markup' > '<div id="id" class="class other"></div>'
                    }
                    li {
                        prism > '.class#id.other;'
                        prism language='markup' > '<div id="id" class="class other"></div>'
                    }
                    li {
                        prism > 'div data-key="value" > "hi";'
                        prism language='markup' > '<div data-key="value">hi</div>'
                    }
                    li {
                        prism > 'p.container > div.panel > button > "Press Me";'
                        prism language='markup' > '<p class="container"><div class="panel"><button>Press Me</button></div></p>'
                    }
                    li {
                        prism > 'p { button > "Press" button > "Cancel"}'
                        prism language='markup' > '<p><button>Press</button><button>Cancel</button></p>'
                    }
                    li {
                        prism { 'p.~''[klass] data-id="~''[id]" > "~''[info.name]"' }
                        prism > '{ id: "post234", klass: "red", info: {name: "RD"} }'
                        prism language='markup' > '<p class="red" data-id="post234">RD</p>'
                    }
                    li {
                        prism { 'span { ~''[: current > 10 ? "More Than 10" ] }' }
                        prism > '{ current: 11 }'
                        prism language='markup' > '<span>More Than 10</span>'
                    }
                    li {
                        prism { 'ul > % each="arr" > li > "~''[.]"' }
                        prism > '{ arr: [1,2,3] }'
                        prism language='markup' > '<ul><li>1</li><li>2</li><li>3</li></ul>'
                    }
                    li {
                        prism { '
% if="number>10" > h4 > "Under"
% else > h3 > "Below"' }
                        prism > '{ number: 9 }'
                        prism language='markup' > '<h3>Below</h3>'
                    }

                }
            }
        }
    }
}
