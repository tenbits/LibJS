header {
    'LibJS Project'
    div style='text-align:right; float:right;' > 'Tao 道 Application Framework'
}

scroller.content.about > p.container.tabPanel{
    div.info.active {
        h4 > 'Component Composition in HTML5 Application without Javascript'
        
        'You can — '
        ul {
            li > 'develop components separate from main project'
            li > 'embed them into the project with all it resources (css, image, html, javascript)'
            li > 'initialize them direct in the markup - without addition javascript'
        }
        
        'And so the development starts to make fun!'
        
        div.hint > code {
            'It is called a "Project", as it is not a monolith framework, but set of libraries. '
            'So that, only you decide, what you need. And when i write ' i > small > '"component composition"'
            ' — thats only my advice, and you can use any of libraries or classes separate.'
        }
        h6 > 'LibJS Project consists of several libraries:'
        ul {
            li { a href='#class' > 'ClassJS' ' — yes, this is Class implementation, but it is the fastest one.' }
            li { a href='#mask' > 'MaskJS'  ' — Dzen Coding Views' }
            li { a href='#include' > 'IncludeJS' ' — More Powerful, but yet easier Resource Loader' }
            li { a href='#includeBuilder' > 'IncludeJS.Builder'' — Node.js tool for building Projects and combining Components' }
            li { a href='#compo' > 'CompoJS'' — Model-View-‹Component›' }
            li { a href='#ruqq' > 'RuqqJS'' — Helper Utilities.' i > ' @todo: needs to be re-factored' }
        }
        div.hint > code > '∗ Optimized for  ￦ebKit Engine (mobile and desktop)'
        
        div {
            h6;
            'So, what does this mean — "without Javascript"?'
            ' As for example, lets look at jQuery widget initialization — '
            ol {
                li > code > 'Define placeholder or container in HTML markup'
                li > code > '"Somewhere" in code — $("#myCompo").initMyComponent(config)'
            }
            'It looks simple — only 2 lines. ' b > i > 'BUT' ', this 2 lines have also 2 Problems.'
            ol {
                li {
                    div > 'Tao'
                    div >'You separate this two lines. (1) is in markup and (2) is "somewhere" in javascript file.'
                    div > 'Smth. must be defined only once - not twice.'
                }
                li {
                    div > 'Actual Performance'
                    div > '(2) line has performance issues - '
                    ul  {
                       li > 'additional DOM Querying'
                       li > 'additional DOM Re-flow and Repaint, while rendering in that HTMLElement'
                    }
                }
            }
            
            'This Project aims to cut off this two problems and the third one — ' b > i > 'Source Code Organization'
            
            p {
                'What is jQuery Widget usually consists of? Right — javascript, css, images ...' br;
                'So to use this widget you have to copy images and scripts into project directory, copy css into application styles.' br;
                'Comfortable? Definitely no. With IncludeJS you "include" this all with only 1 line of code.'
            }
            
            'Interested? Look at the libraries and examples.'
            
        }
        
        h6;
    }

    div.com {
        h4 > 'Custom Tags with MaskJS = Component Oriented Markup (COM)'
        div > 'With this small note i would like to point out the ability to bind custom handlers to tag names. You become really smart templates 
            where you can take the benefit of old good OOP, and i would call that Component Oriented Programming:'
        ul {
            li {
                h5 > 'Abstraction'
                'Usually dialogs markup looks as such:'
                prism language="html" > formatter:pre >
                        "<div class='overlay'> \n\t
                            <div class='container'> \n \t\t
                                <div class='dialog'> \n \t\t\t
                                    <!--content--> \n
                        </div></div></div>"
                'With MaskJS it could be:'
                prism > "dialog { <!-- content --> }"
            }
            li {
                h5 > 'Component Fabric Pattern'
                prism > 'screenDependedComponet small="Compo1" big="Compo2" { <!-- content --> }'
                'or event better per Javascript'
                prism > "mask.registerHandler('myCompo', Info.smallScreen ? Compo1 : Compo2); "
            }
            li {
                h5 > 'Inheritance'
                div > 'You need scroller component with additional features? Your markup can stay untouched, just inherit from Scroller Component, 
                    add required features, and finally register that new component as "scroller" tag handler.'
            }
            li {
                h5 > 'Injection'
                div > 'Replace any element (even "div" tag) with your implementation (for tests, debug, release). Wrap any markup parts with your handler 
                    and control any behavior.'
            }
            
            li {
                '... and much more things you can start with it.'
            }
        }
    }
    
    div.install {
        div.hint {
            'Pre request: ' a href='http://nodejs.org/download/' target='_blank' > 'nodejs'
        }
        p {
            div > code > ' > npm install includejs -g'
            div > code > ' > cd c:/some/path'
            div > code > ' > includejs git-clone libjs'
        }
        div.hint > tt {
            'Now all LibJS libraries are downloaded into  c:/some/path/libjs/'
        }
        p {
            div > code > ' > cd c:/some/temp/test'
            div > code > ' > includejs template starter'
        }
        div.hint > tt {
            'Now under "c:/some/temp/test/" is "Hello World" small app - can see libjs in work'
        }
        
    }
}

footer {
    radioButtons{
        button.active name='info' > 'Info'
        button name='com' > 'COM'
        button name='install' > 'Install'
    }
}