layout:view master='tagApiItem' {
    title > 'validate;'
    description {
        'HTMLElement/MaskJS Component validation. Best used with '
        a href='#/tag/dualbind ' > 'dualbind' 
        
        div {
            "In attributes we set validation patterns that will be used for validation. We also specify message attribute, 
            which will be shown if validation fails. If you use it in dualbind control, validation will be executed every time 
            dom input changes(@see domWay property of a BindingProvider and changeEvent attribute of dualbind). 
            And if that validation fails binding provider will not set that changed data into binded Json Model and user will have a 'Cancel' 
            button for input canceling for HTMLElement's value rollback"
        }
    }

    include > '{libjs}/compos/validation/lib/validation.js'
    source {
        a href='http://github.com/tenbits/Compos/validation/lib/validation.js' target='_blank' > 'GitHub'   
    }
    attributes {
        tr {
            td > 'message="FailedMessage"'
            td > 'Text that will be shown on failed validation'
        }
        tr {
            td > 'getter="propName"'
            td > 'Property Name that will be resolved for validation. If you use it in dualbind control, than you can take this out, as BindingProvider will 
            take that job on it and will provide input data.'
        }
        tr {
            td > 'match="regexp"'
            td > 'RegExp Match Validatior - Example - validate match="[\d]{2,7}"; (note that only one backslash is needed, as in in-line regexp declaration)'
        }
        tr {
            td > 'unmatch="regexp"'
            td > 'Opposite to match validation - if match occurs, than validation will fail'
        }
        tr {
            td > 'minLength="Number"'
            td > 'minimum value length'
        }
        tr {
            td > 'maxLength="Number"'
            td > 'maximum value length'
        }
        tr {
            td > '...'
            td > 'you also can define custom validators'
        }
    } 
    component {
        tr {
            td > 'validate(data?:*dynamic*, element?:HTMLElement, oncancel?:Function):Boolean'
            td { 
                'Perform validation'
                p > '@param data - provide data to validate if getter attribute is not defined'
                p > '@param element - default is the containers HTMLElement. After what element to show invalid notification'
                p > '@param oncancel - invalid notification will contain "cancel" button for custom cancelation handling 
                    (BindingProvider uses this callback to restore previous valid data)'
            }
        }
    }
    depends {
        li > 'MaskJS'
        li > 'ClassJS'
        li > 'RuqqJS:utils.js - Object Helper'
    }       
}


layout:view master='tagApiItem' {
    title > 'validate:group;'
    description {        
        div {
            'Container of validate items'
        }
    }

    include > '{libjs}/compos/validation/lib/validation.js'
    source {
        a href='http://github.com/tenbits/Compos/validation/lib/validation.js' target='_blank' > 'GitHub'   
    }
    attributes {
       '...'
    } 
    component {
        tr {
            td > 'validate():Boolean'
            td { 
                'Perform validation of all validate items within this validate:group tag'                
            }
        }
    }
    depends {
        li > 'MaskJS'
        li > 'ClassJS'
        li > 'RuqqJS:utils.js - Object Helper'
    }       
}
